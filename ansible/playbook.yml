---
- hosts: tomcat
  tasks:
    - name: Set MySQL default password in debconf
      shell: |
        echo "mysql-server mysql-server/root_password password {{ mysql_root_password }}" | debconf-set-selections;
        echo "mysql-server mysql-server/root_password_again password {{ mysql_root_password }}" | debconf-set-selections;

    - name: Update apt-get repo and cache
      apt: update_cache=yes force_apt_get=yes cache_valid_time=3600

    - name: Upgrade all apt packages
      apt: upgrade=dist force_apt_get=yes

    - name: Install required packages
      apt:
        name: "{{ required_packages }}"
        state: present

    - name: Create MySQL init script
      shell: |
        echo "create database if not exists instrumentdata;" > /tmp/init_db.sql
        mysql -u root -p"{{ mysql_root_password }}" < /tmp/init_db.sql
      args:
        creates: /tmp/init_db.sql

    - name: Restart MySQL service
      service:
        name: mysql
        state: restarted
        enabled: true

    - name: Create AppDynamics Directory
      file:
        path: "{{ appdynamics_dir }}"
        state: directory
        mode: "0755"

    - name: Create AppDynamics Java Agent Installer Directory
      file:
        path: "{{ java_agent_directory }}" 
        state: directory
        mode: "0755"

    - name: Download & decompress AppDynamics Java Agent
      unarchive:
        src: "{{ java_agent_source }}"
        dest: "{{ java_agent_directory }}"
        remote_src: yes

    - name: Create AppDynamics Agent Log Directory for node
      file:
        path: "{{ java_agent_directory }}/{{ java_agent_version_directory }}/logs/{{ node_name }}"
        state: directory
        mode: "0755"

    - name: Write controller host to configuration file
      xml:
        path: "{{ java_agent_directory }}/{{ java_agent_version_directory }}/conf/controller-info.xml"
        xpath: /controller-info/controller-host
        value: "{{ controller_host }}"

    - name: Write controller port to configuration file
      xml:
        path: "{{ java_agent_directory }}/{{ java_agent_version_directory }}/conf/controller-info.xml"
        xpath: /controller-info/controller-port
        value: "{{ controller_port }}"

    - name: Write application name to configuration file
      xml:
        path: "{{ java_agent_directory }}/{{ java_agent_version_directory }}/conf/controller-info.xml"
        xpath: /controller-info/application-name
        value: "{{ application_name }}"

    - name: Write tier name to configuration file
      xml:
        path: "{{ java_agent_directory }}/{{ java_agent_version_directory }}/conf/controller-info.xml"
        xpath: /controller-info/tier-name
        value: "{{ tier_name }}"

    - name: Write node name to configuration file
      xml:
        path: "{{ java_agent_directory }}/{{ java_agent_version_directory }}/conf/controller-info.xml"
        xpath: /controller-info/node-name
        value: "{{ node_name }}"

    - name: Write account name to configuration file
      xml:
        path: "{{ java_agent_directory }}/{{ java_agent_version_directory }}/conf/controller-info.xml"
        xpath: /controller-info/account-name
        value: "{{ account_name }}"

    - name: Write account access key to configuration file
      xml:
        path: "{{ java_agent_directory }}/{{ java_agent_version_directory }}/conf/controller-info.xml"
        xpath: /controller-info/account-access-key
        value: "{{ account_access_key }}"
